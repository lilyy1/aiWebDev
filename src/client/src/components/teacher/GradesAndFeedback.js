import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { FaPencilAlt } from "react-icons/fa";
import SideNavbar from '../SideNavbar';
import TeacherSidebarData from './TeacherSidebarData';
import '../../css/teacher/GradesAndFeedback.css';
import axios from 'axios';

const GradesAndFeedback = () => {
  const { submissionId } = useParams();
  // const navigate = useNavigate();

  const [score, setScore] = useState(15); // Placeholder score
  const [comments, setComments] = useState("The comments will be in point format, they will be generated by the LLM\nHowever, they need to be edited and approved before the student gains access to them.\nThe teacher can click on this text box to make changes to AI feedback");
  const [isEditing, setIsEditing] = useState(false);
  const [submissionData, setSubmissionData] = useState({});
  const [link, setLink] = useState('');
  const [content, setContent] = useState('');
  
  useEffect(() => {
    if (submissionId) {
      fetch(`/api/submissions/get/${submissionId}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          // Assuming the submission object has score and comments fields
          setScore(data.grade);
          setComments(data.feedback);
          setLink(data.link);
          setContent(data.content);
          setSubmissionData(data);
        })
        .catch(error => {
          console.error('There was an error fetching the submission:', error);
        });
    }

    // const fetchSubmission = async () => {
    //   try {
    //       const response = await fetch(`/api/submissions/get/${submissionId}`);
    //       const data = await response.json();
    //       setSubmission(data);
    //   } catch (error) {
    //       console.error('Error fetching submission:', error);
    //   }
    // };
  }, [submissionId]);

  const handleScoreChange = (e) => {
    setScore(e.target.value);
  };

  const handleCommentsChange = (e) => {
    setComments(e.target.value);
  };

  const handleModifyClick = async () => {
    try {
      const response = await axios.put(`/api/edit-grades/${submissionId}`, {
        grade: score,
        feedback: comments,
      });
      window.location.reload(); 
    } catch (error) {
      console.error('Error modifying grade and feedback:', error);
    }
  };

  const handleDownloadSubmission = async () => {
    if (submissionId) {
        try {
            const response = await fetch(`/api/submissions/file/${submissionId}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            if (!response.ok) {
                throw new Error('Failed to download submission');
            }
            console.log("response", response);
  
            const blob = await response.blob();
            const contentType = response.headers.get('Content-Type').split(';')[0]; 
            const mimeTypesToExtensions = {
                'application/javascript': 'js',
                'text/javascript': 'js',
                'text/csv': 'csv',
                'application/pdf': 'pdf',
                'text/html': 'html',
                'text/css': 'css',
                'application/x-httpd-php': 'php',
                'text/plain': 'txt', 
                'application/json': 'json',
                // Add more
            };

            let filename;
            const contentDisposition = response.headers.get('Content-Disposition');
            if (mimeTypesToExtensions[contentType]) {
                const extension = mimeTypesToExtensions[contentType];
                filename = `submission.${extension}`; // Set filename to "rubric.extension"
            } else if (contentDisposition && contentDisposition.includes('filename=')) {
                filename = contentDisposition.split('filename=')[1].replace(/"/g, '');
            } else {
                filename = 'submission';
            }
            console.log("filename", filename);
  
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
        } catch (err) {
            console.error('Failed to download submission', err);
        }
    }
  };

  return (
    <div className="grades-feedback-container">
      <SideNavbar data={TeacherSidebarData} />
      <div className="grades-feedback-content">
        <div className="grades-feedback-header">
        <h2>Submission of &gt; {submissionData ? `${submissionData.firstname} ${submissionData.lastname}` : 'Loading...'}</h2>
        </div>
        <div className="grades-feedback-body">
          <div className="section">
            <div className="header">
              <span className="title">Score</span>
              <FaPencilAlt className="edit-icon" onClick={() => setIsEditing(true)} />
            </div>
            {isEditing ? (
              <input
                type="number"
                className="score-input-box"
                value={score}
                onChange={handleScoreChange}
                min="0"
                max={submissionData ? submissionData.maxscore : 50}
              />
            ) : (
              <span className="value">{score}/{submissionData ? submissionData.maxscore : 50}</span>
            )}
          </div>
          <div className="section">
            <div className="header">
              <span className="title">Comments</span>
              <FaPencilAlt className="edit-icon" onClick={() => setIsEditing(true)} />
            </div>
            {isEditing ? (
              <textarea
                className="comments-input-box"
                value={comments}
                onChange={handleCommentsChange}
                rows="10"
                cols="50"
              />
            ) : (
              <>
              <pre className="value">{comments}</pre>
              {(link === 'No link submitted') && content !== 'No content submitted' && (
                <>
                  <div className="modify-button">
                  <button onClick={handleDownloadSubmission}>Download submission</button>
                  </div>
                </>
              )}  
              {(link !== 'No link submitted') && (
                <div className="value">
                  <p>Submitted Link: <a href={link} target="_blank" rel="noopener noreferrer">{link}</a></p>
                </div>
              )}
              </>
            )}
          </div>
          
          {isEditing && (
            <div className="modify-button">
              <button onClick={handleModifyClick}>Modify</button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default GradesAndFeedback;